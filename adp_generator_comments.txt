
"""
add to
launch.json        {
            "name": "Python: adp_generator.py",
            "type": "python",
            "request": "launch",
            "program": "${workspaceFolder}/generators/adp_generator.py",
            "args" : ["--action", "generate_all_objects", "--database", "ALLIANT_PPL_PROD","--schema","DBO", "--input", "generators/generator_files/input_files/alliant_meta_data.csv","--source_short_name","aln"]
        },"""


"""
show columns in database "CUR_ALLIANT_PPL_PROD";
SELECT
    "table_name"
    ,'Alliant source table called: ' || "table_name" as "table_description"
    ,'scd2' as "curated_dbt_type"
    ,"column_name" as "column_name"
    ,'Column in ' || "table_name" || ' called ' || "column_name" as "column_description"
    ,case
        when parse_json("data_type"):type::string = 'FIXED'
            then 'NUMBER' || '(' || parse_json("data_type"):precision::string  || ',' ||
                parse_json("data_type"):scale::string || ')'
        when parse_json("data_type"):type::string = 'TEXT'
            then 'VARCHAR' || '(' || parse_json("data_type"):length::string || ')'
        else parse_json("data_type"):type::string
     end as "source_data_type"
     ,case
        when "column_name" = 'SYSTEM_MODIFIED_DATETIME' then 'updated_date'
        when "column_name" = 'UNIQUE_IDENTITY' then 'unique_key'
        else ''
      end as "column_type"
     ,'unique' as "column_tests"
FROM
    (select * from table(result_scan(last_query_id())))
WHERE
    left("column_name",4) <> 'ADT_';
"""